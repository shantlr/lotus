extend type Query {
  tasks(input: GetTasksInput): [Task!]!
  task(id: ID!): Task
}

extend type Mutation {
  createTask(input: CreateTaskInput!): TaskCreated!
  updateTask(input: UpdateTaskInput!): Task!
  deleteTask(input: DeleteTaskInput!): Boolean
}

input GetTasksInput {
  start: DateTime
  end: DateTime

  order: Order
  size: Int
}

input CreateTaskInput {
  title: String!
  labelIds: [String!]!
  startDate: DateTime!
  endDate: DateTime!
}

input UpdateTaskInput {
  id: ID!
  title: String
  startDate: DateTime
  endDate: DateTime
  labelIds: [ID!]
}

input DeleteTaskInput {
  id: ID!
}

type TaskCreated {
  task: Task!
}

type Task {
  id: ID!
  title: String!
  start: DateTime!
  end: DateTime!

  labels: [Label!]!

  color: String
  secondaryColor: String
}

enum Order {
  ASC
  DESC
}
